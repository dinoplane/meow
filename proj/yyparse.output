Nonterminals useless in grammar

    forlp


Terminals unused in grammar

    TOK_VOID
    TOK_FOR
    TOK_STRUCT
    TOK_NULLPTR
    TOK_ARRAY
    TOK_ARROW
    TOK_ALLOC
    TOK_PTR
    TOK_CHARCON
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNCTION
    TOK_PARAM
    TOK_TYPE_ID
    TOK_INT2FLOAT
    TOK_FLOAT2INT
    TOK_INT2STRING
    TOK_FLOAT2STRING
    TOK_MOMMY
    '['


Rules useless in grammar

   73 forlp: TOK_FOR '(' declhead ';' expr ';' assignhead ')' stat


Grammar

    0 $accept: prog $end

    1 prog: prog stat
    2     | prog func
    3     | prog error
    4     | %empty

    5 stat: decl
    6     | assign
    7     | block
    8     | callstmt
    9     | ifelse
   10     | whilelp
   11     | untillp
   12     | return

   13 func: typeid parameters block

   14 parameters: paramhead ')'
   15           | '(' ')'

   16 paramhead: paramhead ',' typeid
   17          | '(' typeid

   18 block: blockhead '}'
   19      | ';'

   20 blockhead: blockhead stat
   21          | '{'

   22 typeid: type TOK_IDENT

   23 type: TOK_INT
   24     | TOK_FLOAT
   25     | TOK_STRING

   26 decl: declhead ';'

   27 declhead: typeid '=' expr
   28         | typeid

   29 assign: assignhead ';'

   30 assignhead: variable '=' expr
   31           | crement

   32 crement: variable TOK_ADDEQ expr
   33        | variable TOK_SUBEQ expr
   34        | variable TOK_INC
   35        | variable TOK_DEC

   36 callstmt: call ';'

   37 call: callhead ')'
   38     | TOK_IDENT '(' ')'

   39 callhead: callhead ',' expr
   40         | TOK_IDENT '(' expr

   41 condition: '(' expr ')'

   42 ifelse: TOK_IF condition stat TOK_ELSE stat
   43       | TOK_IF condition stat

   44 whilelp: TOK_WHILE condition stat

   45 untillp: TOK_UNTIL '(' expr ')' stat

   46 return: TOK_RETURN expr ';'

   47 expr: binop
   48     | unop
   49     | call
   50     | constant
   51     | variable
   52     | '(' expr ')'

   53 unop: '+' expr
   54     | '-' expr
   55     | TOK_NOT expr

   56 binop: expr '^' expr
   57      | expr '*' expr
   58      | expr '/' expr
   59      | expr '%' expr
   60      | expr '+' expr
   61      | expr '-' expr
   62      | comp

   63 comp: expr TOK_EQ expr
   64     | expr TOK_NE expr
   65     | expr TOK_LT expr
   66     | expr TOK_LE expr
   67     | expr TOK_GT expr
   68     | expr TOK_GE expr

   69 constant: TOK_INTCON
   70         | TOK_STRINGCON
   71         | TOK_FLOATCON

   72 variable: TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 59
    '(' (40) 15 17 38 40 41 45 52
    ')' (41) 14 15 37 38 41 45 52
    '*' (42) 57
    '+' (43) 53 60
    ',' (44) 16 39
    '-' (45) 54 61
    '/' (47) 58
    ';' (59) 19 26 29 36 46
    '=' (61) 27 30
    '[' (91)
    '^' (94) 56
    '{' (123) 21
    '}' (125) 18
    error (256) 3
    TOK_VOID (258)
    TOK_INT (259) 23
    TOK_STRING (260) 25
    TOK_FLOAT (261) 24
    TOK_IF (262) 42 43
    TOK_ELSE (263) 42
    TOK_WHILE (264) 44
    TOK_FOR (265)
    TOK_UNTIL (266) 45
    TOK_RETURN (267) 46
    TOK_STRUCT (268)
    TOK_NULLPTR (269)
    TOK_ARRAY (270)
    TOK_ARROW (271)
    TOK_ALLOC (272)
    TOK_PTR (273)
    TOK_EQ (274) 63
    TOK_NE (275) 64
    TOK_LT (276) 65
    TOK_LE (277) 66
    TOK_GT (278) 67
    TOK_GE (279) 68
    TOK_NOT (280) 55
    TOK_ADDEQ (281) 32
    TOK_SUBEQ (282) 33
    TOK_INC (283) 34
    TOK_DEC (284) 35
    TOK_IDENT (285) 22 38 40 72
    TOK_INTCON (286) 69
    TOK_CHARCON (287)
    TOK_STRINGCON (288) 70
    TOK_FLOATCON (289) 71
    TOK_ROOT (290)
    TOK_BLOCK (291)
    TOK_CALL (292)
    TOK_FUNCTION (293)
    TOK_PARAM (294)
    TOK_TYPE_ID (295)
    TOK_INT2FLOAT (296)
    TOK_FLOAT2INT (297)
    TOK_INT2STRING (298)
    TOK_FLOAT2STRING (299)
    TOK_MOMMY (300)
    UNARY (301)


Nonterminals, with rules where they appear

    $accept (61)
        on left: 0
    prog (62)
        on left: 1 2 3 4
        on right: 0 1 2 3
    stat (63)
        on left: 5 6 7 8 9 10 11 12
        on right: 1 20 42 43 44 45
    func (64)
        on left: 13
        on right: 2
    parameters (65)
        on left: 14 15
        on right: 13
    paramhead (66)
        on left: 16 17
        on right: 14 16
    block (67)
        on left: 18 19
        on right: 7 13
    blockhead (68)
        on left: 20 21
        on right: 18 20
    typeid (69)
        on left: 22
        on right: 13 16 17 27 28
    type (70)
        on left: 23 24 25
        on right: 22
    decl (71)
        on left: 26
        on right: 5
    declhead (72)
        on left: 27 28
        on right: 26
    assign (73)
        on left: 29
        on right: 6
    assignhead (74)
        on left: 30 31
        on right: 29
    crement (75)
        on left: 32 33 34 35
        on right: 31
    callstmt (76)
        on left: 36
        on right: 8
    call (77)
        on left: 37 38
        on right: 36 49
    callhead (78)
        on left: 39 40
        on right: 37 39
    condition (79)
        on left: 41
        on right: 42 43 44
    ifelse (80)
        on left: 42 43
        on right: 9
    whilelp (81)
        on left: 44
        on right: 10
    untillp (82)
        on left: 45
        on right: 11
    return (83)
        on left: 46
        on right: 12
    expr (84)
        on left: 47 48 49 50 51 52
        on right: 27 30 32 33 39 40 41 45 46 52 53 54 55 56 57 58 59 60 61 63 64 65 66 67 68
    unop (85)
        on left: 53 54 55
        on right: 48
    binop (86)
        on left: 56 57 58 59 60 61 62
        on right: 47
    comp (87)
        on left: 63 64 65 66 67 68
        on right: 62
    constant (88)
        on left: 69 70 71
        on right: 50
    variable (89)
        on left: 72
        on right: 30 32 33 34 35 51


State 0

    0 $accept: . prog $end

    $default  reduce using rule 4 (prog)

    prog  go to state 1


State 1

    0 $accept: prog . $end
    1 prog: prog . stat
    2     | prog . func
    3     | prog . error

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 14
    func        go to state 15
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 18
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 2

    0 $accept: prog $end .

    $default  accept


State 3

    3 prog: prog error .

    $default  reduce using rule 3 (prog)


State 4

   23 type: TOK_INT .

    $default  reduce using rule 23 (type)


State 5

   25 type: TOK_STRING .

    $default  reduce using rule 25 (type)


State 6

   24 type: TOK_FLOAT .

    $default  reduce using rule 24 (type)


State 7

   42 ifelse: TOK_IF . condition stat TOK_ELSE stat
   43       | TOK_IF . condition stat

    '('  shift, and go to state 33

    condition  go to state 34


State 8

   44 whilelp: TOK_WHILE . condition stat

    '('  shift, and go to state 33

    condition  go to state 35


State 9

   45 untillp: TOK_UNTIL . '(' expr ')' stat

    '('  shift, and go to state 36


State 10

   46 return: TOK_RETURN . expr ';'

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 45
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 11

   38 call: TOK_IDENT . '(' ')'
   40 callhead: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 51

    $default  reduce using rule 72 (variable)


State 12

   19 block: ';' .

    $default  reduce using rule 19 (block)


State 13

   21 blockhead: '{' .

    $default  reduce using rule 21 (blockhead)


State 14

    1 prog: prog stat .

    $default  reduce using rule 1 (prog)


State 15

    2 prog: prog func .

    $default  reduce using rule 2 (prog)


State 16

    7 stat: block .

    $default  reduce using rule 7 (stat)


State 17

   18 block: blockhead . '}'
   20 blockhead: blockhead . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    '}'         shift, and go to state 52
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 53
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 54
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 18

   13 func: typeid . parameters block
   27 declhead: typeid . '=' expr
   28         | typeid .

    '='  shift, and go to state 55
    '('  shift, and go to state 56

    $default  reduce using rule 28 (declhead)

    parameters  go to state 57
    paramhead   go to state 58


State 19

   22 typeid: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 59


State 20

    5 stat: decl .

    $default  reduce using rule 5 (stat)


State 21

   26 decl: declhead . ';'

    ';'  shift, and go to state 60


State 22

    6 stat: assign .

    $default  reduce using rule 6 (stat)


State 23

   29 assign: assignhead . ';'

    ';'  shift, and go to state 61


State 24

   31 assignhead: crement .

    $default  reduce using rule 31 (assignhead)


State 25

    8 stat: callstmt .

    $default  reduce using rule 8 (stat)


State 26

   36 callstmt: call . ';'

    ';'  shift, and go to state 62


State 27

   37 call: callhead . ')'
   39 callhead: callhead . ',' expr

    ')'  shift, and go to state 63
    ','  shift, and go to state 64


State 28

    9 stat: ifelse .

    $default  reduce using rule 9 (stat)


State 29

   10 stat: whilelp .

    $default  reduce using rule 10 (stat)


State 30

   11 stat: untillp .

    $default  reduce using rule 11 (stat)


State 31

   12 stat: return .

    $default  reduce using rule 12 (stat)


State 32

   30 assignhead: variable . '=' expr
   32 crement: variable . TOK_ADDEQ expr
   33        | variable . TOK_SUBEQ expr
   34        | variable . TOK_INC
   35        | variable . TOK_DEC

    TOK_ADDEQ  shift, and go to state 65
    TOK_SUBEQ  shift, and go to state 66
    TOK_INC    shift, and go to state 67
    TOK_DEC    shift, and go to state 68
    '='        shift, and go to state 69


State 33

   41 condition: '(' . expr ')'

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 70
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 34

   42 ifelse: TOK_IF condition . stat TOK_ELSE stat
   43       | TOK_IF condition . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 71
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 54
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 35

   44 whilelp: TOK_WHILE condition . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 72
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 54
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 36

   45 untillp: TOK_UNTIL '(' . expr ')' stat

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 73
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 37

   55 unop: TOK_NOT . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 74
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 38

   69 constant: TOK_INTCON .

    $default  reduce using rule 69 (constant)


State 39

   70 constant: TOK_STRINGCON .

    $default  reduce using rule 70 (constant)


State 40

   71 constant: TOK_FLOATCON .

    $default  reduce using rule 71 (constant)


State 41

   53 unop: '+' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 75
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 42

   54 unop: '-' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 76
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 43

   52 expr: '(' . expr ')'

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 77
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 44

   49 expr: call .

    $default  reduce using rule 49 (expr)


State 45

   46 return: TOK_RETURN expr . ';'
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89
    ';'     shift, and go to state 90


State 46

   48 expr: unop .

    $default  reduce using rule 48 (expr)


State 47

   47 expr: binop .

    $default  reduce using rule 47 (expr)


State 48

   62 binop: comp .

    $default  reduce using rule 62 (binop)


State 49

   50 expr: constant .

    $default  reduce using rule 50 (expr)


State 50

   51 expr: variable .

    $default  reduce using rule 51 (expr)


State 51

   38 call: TOK_IDENT '(' . ')'
   40 callhead: TOK_IDENT '(' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43
    ')'            shift, and go to state 91

    call      go to state 44
    callhead  go to state 27
    expr      go to state 92
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 52

   18 block: blockhead '}' .

    $default  reduce using rule 18 (block)


State 53

   20 blockhead: blockhead stat .

    $default  reduce using rule 20 (blockhead)


State 54

   27 declhead: typeid . '=' expr
   28         | typeid .

    '='  shift, and go to state 55

    $default  reduce using rule 28 (declhead)


State 55

   27 declhead: typeid '=' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 93
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 56

   15 parameters: '(' . ')'
   17 paramhead: '(' . typeid

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    ')'         shift, and go to state 94

    typeid  go to state 95
    type    go to state 19


State 57

   13 func: typeid parameters . block

    ';'  shift, and go to state 12
    '{'  shift, and go to state 13

    block      go to state 96
    blockhead  go to state 17


State 58

   14 parameters: paramhead . ')'
   16 paramhead: paramhead . ',' typeid

    ')'  shift, and go to state 97
    ','  shift, and go to state 98


State 59

   22 typeid: type TOK_IDENT .

    $default  reduce using rule 22 (typeid)


State 60

   26 decl: declhead ';' .

    $default  reduce using rule 26 (decl)


State 61

   29 assign: assignhead ';' .

    $default  reduce using rule 29 (assign)


State 62

   36 callstmt: call ';' .

    $default  reduce using rule 36 (callstmt)


State 63

   37 call: callhead ')' .

    $default  reduce using rule 37 (call)


State 64

   39 callhead: callhead ',' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 99
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 65

   32 crement: variable TOK_ADDEQ . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 100
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 66

   33 crement: variable TOK_SUBEQ . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 101
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 67

   34 crement: variable TOK_INC .

    $default  reduce using rule 34 (crement)


State 68

   35 crement: variable TOK_DEC .

    $default  reduce using rule 35 (crement)


State 69

   30 assignhead: variable '=' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 102
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 70

   41 condition: '(' expr . ')'
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89
    ')'     shift, and go to state 103


State 71

   42 ifelse: TOK_IF condition stat . TOK_ELSE stat
   43       | TOK_IF condition stat .

    TOK_ELSE  shift, and go to state 104

    $default  reduce using rule 43 (ifelse)


State 72

   44 whilelp: TOK_WHILE condition stat .

    $default  reduce using rule 44 (whilelp)


State 73

   45 untillp: TOK_UNTIL '(' expr . ')' stat
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89
    ')'     shift, and go to state 105


State 74

   55 unop: TOK_NOT expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 55 (unop)


State 75

   53 unop: '+' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 53 (unop)


State 76

   54 unop: '-' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 54 (unop)


State 77

   52 expr: '(' expr . ')'
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89
    ')'     shift, and go to state 106


State 78

   63 comp: expr TOK_EQ . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 107
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 79

   64 comp: expr TOK_NE . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 108
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 80

   65 comp: expr TOK_LT . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 109
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 81

   66 comp: expr TOK_LE . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 110
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 82

   67 comp: expr TOK_GT . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 111
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 83

   68 comp: expr TOK_GE . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 112
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 84

   60 binop: expr '+' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 113
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 85

   61 binop: expr '-' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 114
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 86

   57 binop: expr '*' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 115
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 87

   58 binop: expr '/' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 116
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 88

   59 binop: expr '%' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 117
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 89

   56 binop: expr '^' . expr

    TOK_NOT        shift, and go to state 37
    TOK_IDENT      shift, and go to state 11
    TOK_INTCON     shift, and go to state 38
    TOK_STRINGCON  shift, and go to state 39
    TOK_FLOATCON   shift, and go to state 40
    '+'            shift, and go to state 41
    '-'            shift, and go to state 42
    '('            shift, and go to state 43

    call      go to state 44
    callhead  go to state 27
    expr      go to state 118
    unop      go to state 46
    binop     go to state 47
    comp      go to state 48
    constant  go to state 49
    variable  go to state 50


State 90

   46 return: TOK_RETURN expr ';' .

    $default  reduce using rule 46 (return)


State 91

   38 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 38 (call)


State 92

   40 callhead: TOK_IDENT '(' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 40 (callhead)


State 93

   27 declhead: typeid '=' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 27 (declhead)


State 94

   15 parameters: '(' ')' .

    $default  reduce using rule 15 (parameters)


State 95

   17 paramhead: '(' typeid .

    $default  reduce using rule 17 (paramhead)


State 96

   13 func: typeid parameters block .

    $default  reduce using rule 13 (func)


State 97

   14 parameters: paramhead ')' .

    $default  reduce using rule 14 (parameters)


State 98

   16 paramhead: paramhead ',' . typeid

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6

    typeid  go to state 119
    type    go to state 19


State 99

   39 callhead: callhead ',' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 39 (callhead)


State 100

   32 crement: variable TOK_ADDEQ expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 32 (crement)


State 101

   33 crement: variable TOK_SUBEQ expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 33 (crement)


State 102

   30 assignhead: variable '=' expr .
   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 78
    TOK_NE  shift, and go to state 79
    TOK_LT  shift, and go to state 80
    TOK_LE  shift, and go to state 81
    TOK_GT  shift, and go to state 82
    TOK_GE  shift, and go to state 83
    '+'     shift, and go to state 84
    '-'     shift, and go to state 85
    '*'     shift, and go to state 86
    '/'     shift, and go to state 87
    '%'     shift, and go to state 88
    '^'     shift, and go to state 89

    $default  reduce using rule 30 (assignhead)


State 103

   41 condition: '(' expr ')' .

    $default  reduce using rule 41 (condition)


State 104

   42 ifelse: TOK_IF condition stat TOK_ELSE . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 120
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 54
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 105

   45 untillp: TOK_UNTIL '(' expr ')' . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_UNTIL   shift, and go to state 9
    TOK_RETURN  shift, and go to state 10
    TOK_IDENT   shift, and go to state 11
    ';'         shift, and go to state 12
    '{'         shift, and go to state 13

    stat        go to state 121
    block       go to state 16
    blockhead   go to state 17
    typeid      go to state 54
    type        go to state 19
    decl        go to state 20
    declhead    go to state 21
    assign      go to state 22
    assignhead  go to state 23
    crement     go to state 24
    callstmt    go to state 25
    call        go to state 26
    callhead    go to state 27
    ifelse      go to state 28
    whilelp     go to state 29
    untillp     go to state 30
    return      go to state 31
    variable    go to state 32


State 106

   52 expr: '(' expr ')' .

    $default  reduce using rule 52 (expr)


State 107

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   63     | expr TOK_EQ expr .
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 63 (comp)


State 108

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   64     | expr TOK_NE expr .
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 64 (comp)


State 109

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   65     | expr TOK_LT expr .
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 65 (comp)


State 110

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   66     | expr TOK_LE expr .
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 66 (comp)


State 111

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   67     | expr TOK_GT expr .
   68     | expr . TOK_GE expr

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 67 (comp)


State 112

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr
   68     | expr TOK_GE expr .

    '+'  shift, and go to state 84
    '-'  shift, and go to state 85
    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 68 (comp)


State 113

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   60      | expr '+' expr .
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 60 (binop)


State 114

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   61      | expr '-' expr .
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '*'  shift, and go to state 86
    '/'  shift, and go to state 87
    '%'  shift, and go to state 88
    '^'  shift, and go to state 89

    $default  reduce using rule 61 (binop)


State 115

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   57      | expr '*' expr .
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 57 (binop)


State 116

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   58      | expr '/' expr .
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 58 (binop)


State 117

   56 binop: expr . '^' expr
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   59      | expr '%' expr .
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 59 (binop)


State 118

   56 binop: expr . '^' expr
   56      | expr '^' expr .
   57      | expr . '*' expr
   58      | expr . '/' expr
   59      | expr . '%' expr
   60      | expr . '+' expr
   61      | expr . '-' expr
   63 comp: expr . TOK_EQ expr
   64     | expr . TOK_NE expr
   65     | expr . TOK_LT expr
   66     | expr . TOK_LE expr
   67     | expr . TOK_GT expr
   68     | expr . TOK_GE expr

    '^'  shift, and go to state 89

    $default  reduce using rule 56 (binop)


State 119

   16 paramhead: paramhead ',' typeid .

    $default  reduce using rule 16 (paramhead)


State 120

   42 ifelse: TOK_IF condition stat TOK_ELSE stat .

    $default  reduce using rule 42 (ifelse)


State 121

   45 untillp: TOK_UNTIL '(' expr ')' stat .

    $default  reduce using rule 45 (untillp)
