Terminals unused in grammar

    TOK_VOID
    TOK_STRUCT
    TOK_NULLPTR
    TOK_ARRAY
    TOK_ARROW
    TOK_ALLOC
    TOK_PTR
    TOK_CHARCON
    TOK_ROOT
    TOK_BLOCK
    TOK_CALL
    TOK_FUNCTION
    TOK_PARAM
    TOK_TYPE_ID
    '['


Grammar

    0 $accept: prog $end

    1 prog: prog stat
    2     | prog func
    3     | prog error
    4     | %empty

    5 stat: decl
    6     | assign
    7     | block
    8     | callstmt
    9     | ifelse
   10     | whilelp
   11     | forlp
   12     | untillp
   13     | return

   14 func: typeid parameters block

   15 parameters: paramhead ')'
   16           | '(' ')'

   17 paramhead: paramhead ',' typeid
   18          | '(' typeid

   19 block: blockhead '}'
   20      | ';'

   21 blockhead: blockhead stat
   22          | '{'

   23 typeid: type TOK_IDENT

   24 type: TOK_INT
   25     | TOK_FLOAT
   26     | TOK_STRING

   27 decl: declhead ';'

   28 declhead: typeid '=' expr
   29         | typeid

   30 assign: assignhead ';'

   31 assignhead: variable '=' expr
   32           | crement

   33 crement: variable TOK_ADDEQ expr
   34        | variable TOK_SUBEQ expr
   35        | variable TOK_INC
   36        | variable TOK_DEC

   37 callstmt: call ';'

   38 call: callhead ')'
   39     | TOK_IDENT '(' ')'

   40 callhead: callhead ',' expr
   41         | TOK_IDENT '(' expr

   42 ifelse: TOK_IF '(' expr ')' stat TOK_ELSE stat
   43       | TOK_IF '(' expr ')' stat

   44 whilelp: TOK_WHILE '(' expr ')' stat

   45 forlp: TOK_FOR '(' declhead ';' expr ';' assignhead ')' stat

   46 untillp: TOK_UNTIL '(' expr ')' stat

   47 return: TOK_RETURN expr ';'

   48 expr: binop
   49     | unop
   50     | call
   51     | constant
   52     | variable
   53     | '(' expr ')'

   54 unop: '+' expr
   55     | '-' expr
   56     | TOK_NOT expr

   57 binop: expr '^' expr
   58      | expr '*' expr
   59      | expr '/' expr
   60      | expr '%' expr
   61      | expr '+' expr
   62      | expr '-' expr
   63      | expr TOK_EQ expr
   64      | expr TOK_NE expr
   65      | expr TOK_LT expr
   66      | expr TOK_LE expr
   67      | expr TOK_GT expr
   68      | expr TOK_GE expr

   69 constant: TOK_INTCON
   70         | TOK_STRINGCON
   71         | TOK_FLOATCON

   72 variable: TOK_IDENT


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 60
    '(' (40) 16 18 39 41 42 43 44 45 46 53
    ')' (41) 15 16 38 39 42 43 44 45 46 53
    '*' (42) 58
    '+' (43) 54 61
    ',' (44) 17 40
    '-' (45) 55 62
    '/' (47) 59
    ';' (59) 20 27 30 37 45 47
    '=' (61) 28 31
    '[' (91)
    '^' (94) 57
    '{' (123) 22
    '}' (125) 19
    error (256) 3
    TOK_VOID (258)
    TOK_INT (259) 24
    TOK_STRING (260) 26
    TOK_FLOAT (261) 25
    TOK_IF (262) 42 43
    TOK_ELSE (263) 42
    TOK_WHILE (264) 44
    TOK_FOR (265) 45
    TOK_UNTIL (266) 46
    TOK_RETURN (267) 47
    TOK_STRUCT (268)
    TOK_NULLPTR (269)
    TOK_ARRAY (270)
    TOK_ARROW (271)
    TOK_ALLOC (272)
    TOK_PTR (273)
    TOK_EQ (274) 63
    TOK_NE (275) 64
    TOK_LT (276) 65
    TOK_LE (277) 66
    TOK_GT (278) 67
    TOK_GE (279) 68
    TOK_NOT (280) 56
    TOK_ADDEQ (281) 33
    TOK_SUBEQ (282) 34
    TOK_INC (283) 35
    TOK_DEC (284) 36
    TOK_IDENT (285) 23 39 41 72
    TOK_INTCON (286) 69
    TOK_CHARCON (287)
    TOK_STRINGCON (288) 70
    TOK_FLOATCON (289) 71
    TOK_ROOT (290)
    TOK_BLOCK (291)
    TOK_CALL (292)
    TOK_FUNCTION (293)
    TOK_PARAM (294)
    TOK_TYPE_ID (295)
    UNARY (296)


Nonterminals, with rules where they appear

    $accept (56)
        on left: 0
    prog (57)
        on left: 1 2 3 4
        on right: 0 1 2 3
    stat (58)
        on left: 5 6 7 8 9 10 11 12 13
        on right: 1 21 42 43 44 45 46
    func (59)
        on left: 14
        on right: 2
    parameters (60)
        on left: 15 16
        on right: 14
    paramhead (61)
        on left: 17 18
        on right: 15 17
    block (62)
        on left: 19 20
        on right: 7 14
    blockhead (63)
        on left: 21 22
        on right: 19 21
    typeid (64)
        on left: 23
        on right: 14 17 18 28 29
    type (65)
        on left: 24 25 26
        on right: 23
    decl (66)
        on left: 27
        on right: 5
    declhead (67)
        on left: 28 29
        on right: 27 45
    assign (68)
        on left: 30
        on right: 6
    assignhead (69)
        on left: 31 32
        on right: 30 45
    crement (70)
        on left: 33 34 35 36
        on right: 32
    callstmt (71)
        on left: 37
        on right: 8
    call (72)
        on left: 38 39
        on right: 37 50
    callhead (73)
        on left: 40 41
        on right: 38 40
    ifelse (74)
        on left: 42 43
        on right: 9
    whilelp (75)
        on left: 44
        on right: 10
    forlp (76)
        on left: 45
        on right: 11
    untillp (77)
        on left: 46
        on right: 12
    return (78)
        on left: 47
        on right: 13
    expr (79)
        on left: 48 49 50 51 52 53
        on right: 28 31 33 34 40 41 42 43 44 45 46 47 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68
    unop (80)
        on left: 54 55 56
        on right: 49
    binop (81)
        on left: 57 58 59 60 61 62 63 64 65 66 67 68
        on right: 48
    constant (82)
        on left: 69 70 71
        on right: 51
    variable (83)
        on left: 72
        on right: 31 33 34 35 36 52


State 0

    0 $accept: . prog $end

    $default  reduce using rule 4 (prog)

    prog  go to state 1


State 1

    0 $accept: prog . $end
    1 prog: prog . stat
    2     | prog . func
    3     | prog . error

    $end        shift, and go to state 2
    error       shift, and go to state 3
    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 15
    func        go to state 16
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 19
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 2

    0 $accept: prog $end .

    $default  accept


State 3

    3 prog: prog error .

    $default  reduce using rule 3 (prog)


State 4

   24 type: TOK_INT .

    $default  reduce using rule 24 (type)


State 5

   26 type: TOK_STRING .

    $default  reduce using rule 26 (type)


State 6

   25 type: TOK_FLOAT .

    $default  reduce using rule 25 (type)


State 7

   42 ifelse: TOK_IF . '(' expr ')' stat TOK_ELSE stat
   43       | TOK_IF . '(' expr ')' stat

    '('  shift, and go to state 35


State 8

   44 whilelp: TOK_WHILE . '(' expr ')' stat

    '('  shift, and go to state 36


State 9

   45 forlp: TOK_FOR . '(' declhead ';' expr ';' assignhead ')' stat

    '('  shift, and go to state 37


State 10

   46 untillp: TOK_UNTIL . '(' expr ')' stat

    '('  shift, and go to state 38


State 11

   47 return: TOK_RETURN . expr ';'

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 47
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 12

   39 call: TOK_IDENT . '(' ')'
   41 callhead: TOK_IDENT . '(' expr
   72 variable: TOK_IDENT .

    '('  shift, and go to state 52

    $default  reduce using rule 72 (variable)


State 13

   20 block: ';' .

    $default  reduce using rule 20 (block)


State 14

   22 blockhead: '{' .

    $default  reduce using rule 22 (blockhead)


State 15

    1 prog: prog stat .

    $default  reduce using rule 1 (prog)


State 16

    2 prog: prog func .

    $default  reduce using rule 2 (prog)


State 17

    7 stat: block .

    $default  reduce using rule 7 (stat)


State 18

   19 block: blockhead . '}'
   21 blockhead: blockhead . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    '}'         shift, and go to state 53
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 54
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 19

   14 func: typeid . parameters block
   28 declhead: typeid . '=' expr
   29         | typeid .

    '='  shift, and go to state 56
    '('  shift, and go to state 57

    $default  reduce using rule 29 (declhead)

    parameters  go to state 58
    paramhead   go to state 59


State 20

   23 typeid: type . TOK_IDENT

    TOK_IDENT  shift, and go to state 60


State 21

    5 stat: decl .

    $default  reduce using rule 5 (stat)


State 22

   27 decl: declhead . ';'

    ';'  shift, and go to state 61


State 23

    6 stat: assign .

    $default  reduce using rule 6 (stat)


State 24

   30 assign: assignhead . ';'

    ';'  shift, and go to state 62


State 25

   32 assignhead: crement .

    $default  reduce using rule 32 (assignhead)


State 26

    8 stat: callstmt .

    $default  reduce using rule 8 (stat)


State 27

   37 callstmt: call . ';'

    ';'  shift, and go to state 63


State 28

   38 call: callhead . ')'
   40 callhead: callhead . ',' expr

    ')'  shift, and go to state 64
    ','  shift, and go to state 65


State 29

    9 stat: ifelse .

    $default  reduce using rule 9 (stat)


State 30

   10 stat: whilelp .

    $default  reduce using rule 10 (stat)


State 31

   11 stat: forlp .

    $default  reduce using rule 11 (stat)


State 32

   12 stat: untillp .

    $default  reduce using rule 12 (stat)


State 33

   13 stat: return .

    $default  reduce using rule 13 (stat)


State 34

   31 assignhead: variable . '=' expr
   33 crement: variable . TOK_ADDEQ expr
   34        | variable . TOK_SUBEQ expr
   35        | variable . TOK_INC
   36        | variable . TOK_DEC

    TOK_ADDEQ  shift, and go to state 66
    TOK_SUBEQ  shift, and go to state 67
    TOK_INC    shift, and go to state 68
    TOK_DEC    shift, and go to state 69
    '='        shift, and go to state 70


State 35

   42 ifelse: TOK_IF '(' . expr ')' stat TOK_ELSE stat
   43       | TOK_IF '(' . expr ')' stat

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 71
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 36

   44 whilelp: TOK_WHILE '(' . expr ')' stat

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 72
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 37

   45 forlp: TOK_FOR '(' . declhead ';' expr ';' assignhead ')' stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6

    typeid    go to state 55
    type      go to state 20
    declhead  go to state 73


State 38

   46 untillp: TOK_UNTIL '(' . expr ')' stat

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 74
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 39

   56 unop: TOK_NOT . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 75
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 40

   69 constant: TOK_INTCON .

    $default  reduce using rule 69 (constant)


State 41

   70 constant: TOK_STRINGCON .

    $default  reduce using rule 70 (constant)


State 42

   71 constant: TOK_FLOATCON .

    $default  reduce using rule 71 (constant)


State 43

   54 unop: '+' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 76
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 44

   55 unop: '-' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 77
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 45

   53 expr: '(' . expr ')'

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 78
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 46

   50 expr: call .

    $default  reduce using rule 50 (expr)


State 47

   47 return: TOK_RETURN expr . ';'
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ';'     shift, and go to state 91


State 48

   49 expr: unop .

    $default  reduce using rule 49 (expr)


State 49

   48 expr: binop .

    $default  reduce using rule 48 (expr)


State 50

   51 expr: constant .

    $default  reduce using rule 51 (expr)


State 51

   52 expr: variable .

    $default  reduce using rule 52 (expr)


State 52

   39 call: TOK_IDENT '(' . ')'
   41 callhead: TOK_IDENT '(' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45
    ')'            shift, and go to state 92

    call      go to state 46
    callhead  go to state 28
    expr      go to state 93
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 53

   19 block: blockhead '}' .

    $default  reduce using rule 19 (block)


State 54

   21 blockhead: blockhead stat .

    $default  reduce using rule 21 (blockhead)


State 55

   28 declhead: typeid . '=' expr
   29         | typeid .

    '='  shift, and go to state 56

    $default  reduce using rule 29 (declhead)


State 56

   28 declhead: typeid '=' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 94
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 57

   16 parameters: '(' . ')'
   18 paramhead: '(' . typeid

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    ')'         shift, and go to state 95

    typeid  go to state 96
    type    go to state 20


State 58

   14 func: typeid parameters . block

    ';'  shift, and go to state 13
    '{'  shift, and go to state 14

    block      go to state 97
    blockhead  go to state 18


State 59

   15 parameters: paramhead . ')'
   17 paramhead: paramhead . ',' typeid

    ')'  shift, and go to state 98
    ','  shift, and go to state 99


State 60

   23 typeid: type TOK_IDENT .

    $default  reduce using rule 23 (typeid)


State 61

   27 decl: declhead ';' .

    $default  reduce using rule 27 (decl)


State 62

   30 assign: assignhead ';' .

    $default  reduce using rule 30 (assign)


State 63

   37 callstmt: call ';' .

    $default  reduce using rule 37 (callstmt)


State 64

   38 call: callhead ')' .

    $default  reduce using rule 38 (call)


State 65

   40 callhead: callhead ',' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 100
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 66

   33 crement: variable TOK_ADDEQ . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 101
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 67

   34 crement: variable TOK_SUBEQ . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 102
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 68

   35 crement: variable TOK_INC .

    $default  reduce using rule 35 (crement)


State 69

   36 crement: variable TOK_DEC .

    $default  reduce using rule 36 (crement)


State 70

   31 assignhead: variable '=' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 103
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 71

   42 ifelse: TOK_IF '(' expr . ')' stat TOK_ELSE stat
   43       | TOK_IF '(' expr . ')' stat
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ')'     shift, and go to state 104


State 72

   44 whilelp: TOK_WHILE '(' expr . ')' stat
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ')'     shift, and go to state 105


State 73

   45 forlp: TOK_FOR '(' declhead . ';' expr ';' assignhead ')' stat

    ';'  shift, and go to state 106


State 74

   46 untillp: TOK_UNTIL '(' expr . ')' stat
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ')'     shift, and go to state 107


State 75

   56 unop: TOK_NOT expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 56 (unop)


State 76

   54 unop: '+' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 54 (unop)


State 77

   55 unop: '-' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 55 (unop)


State 78

   53 expr: '(' expr . ')'
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ')'     shift, and go to state 108


State 79

   63 binop: expr TOK_EQ . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 109
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 80

   64 binop: expr TOK_NE . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 110
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 81

   65 binop: expr TOK_LT . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 111
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 82

   66 binop: expr TOK_LE . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 112
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 83

   67 binop: expr TOK_GT . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 113
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 84

   68 binop: expr TOK_GE . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 114
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 85

   61 binop: expr '+' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 115
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 86

   62 binop: expr '-' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 116
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 87

   58 binop: expr '*' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 117
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 88

   59 binop: expr '/' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 118
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 89

   60 binop: expr '%' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 119
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 90

   57 binop: expr '^' . expr

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 120
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 91

   47 return: TOK_RETURN expr ';' .

    $default  reduce using rule 47 (return)


State 92

   39 call: TOK_IDENT '(' ')' .

    $default  reduce using rule 39 (call)


State 93

   41 callhead: TOK_IDENT '(' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 41 (callhead)


State 94

   28 declhead: typeid '=' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 28 (declhead)


State 95

   16 parameters: '(' ')' .

    $default  reduce using rule 16 (parameters)


State 96

   18 paramhead: '(' typeid .

    $default  reduce using rule 18 (paramhead)


State 97

   14 func: typeid parameters block .

    $default  reduce using rule 14 (func)


State 98

   15 parameters: paramhead ')' .

    $default  reduce using rule 15 (parameters)


State 99

   17 paramhead: paramhead ',' . typeid

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6

    typeid  go to state 121
    type    go to state 20


State 100

   40 callhead: callhead ',' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 40 (callhead)


State 101

   33 crement: variable TOK_ADDEQ expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 33 (crement)


State 102

   34 crement: variable TOK_SUBEQ expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 34 (crement)


State 103

   31 assignhead: variable '=' expr .
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90

    $default  reduce using rule 31 (assignhead)


State 104

   42 ifelse: TOK_IF '(' expr ')' . stat TOK_ELSE stat
   43       | TOK_IF '(' expr ')' . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 122
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 105

   44 whilelp: TOK_WHILE '(' expr ')' . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 123
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 106

   45 forlp: TOK_FOR '(' declhead ';' . expr ';' assignhead ')' stat

    TOK_NOT        shift, and go to state 39
    TOK_IDENT      shift, and go to state 12
    TOK_INTCON     shift, and go to state 40
    TOK_STRINGCON  shift, and go to state 41
    TOK_FLOATCON   shift, and go to state 42
    '+'            shift, and go to state 43
    '-'            shift, and go to state 44
    '('            shift, and go to state 45

    call      go to state 46
    callhead  go to state 28
    expr      go to state 124
    unop      go to state 48
    binop     go to state 49
    constant  go to state 50
    variable  go to state 51


State 107

   46 untillp: TOK_UNTIL '(' expr ')' . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 125
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 108

   53 expr: '(' expr ')' .

    $default  reduce using rule 53 (expr)


State 109

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   63      | expr TOK_EQ expr .
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 63 (binop)


State 110

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   64      | expr TOK_NE expr .
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 64 (binop)


State 111

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   65      | expr TOK_LT expr .
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 65 (binop)


State 112

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   66      | expr TOK_LE expr .
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 66 (binop)


State 113

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   67      | expr TOK_GT expr .
   68      | expr . TOK_GE expr

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 67 (binop)


State 114

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr
   68      | expr TOK_GE expr .

    '+'  shift, and go to state 85
    '-'  shift, and go to state 86
    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 68 (binop)


State 115

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   61      | expr '+' expr .
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 61 (binop)


State 116

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   62      | expr '-' expr .
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '*'  shift, and go to state 87
    '/'  shift, and go to state 88
    '%'  shift, and go to state 89
    '^'  shift, and go to state 90

    $default  reduce using rule 62 (binop)


State 117

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   58      | expr '*' expr .
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 58 (binop)


State 118

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   59      | expr '/' expr .
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 59 (binop)


State 119

   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   60      | expr '%' expr .
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 60 (binop)


State 120

   57 binop: expr . '^' expr
   57      | expr '^' expr .
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    '^'  shift, and go to state 90

    $default  reduce using rule 57 (binop)


State 121

   17 paramhead: paramhead ',' typeid .

    $default  reduce using rule 17 (paramhead)


State 122

   42 ifelse: TOK_IF '(' expr ')' stat . TOK_ELSE stat
   43       | TOK_IF '(' expr ')' stat .

    TOK_ELSE  shift, and go to state 126

    $default  reduce using rule 43 (ifelse)


State 123

   44 whilelp: TOK_WHILE '(' expr ')' stat .

    $default  reduce using rule 44 (whilelp)


State 124

   45 forlp: TOK_FOR '(' declhead ';' expr . ';' assignhead ')' stat
   57 binop: expr . '^' expr
   58      | expr . '*' expr
   59      | expr . '/' expr
   60      | expr . '%' expr
   61      | expr . '+' expr
   62      | expr . '-' expr
   63      | expr . TOK_EQ expr
   64      | expr . TOK_NE expr
   65      | expr . TOK_LT expr
   66      | expr . TOK_LE expr
   67      | expr . TOK_GT expr
   68      | expr . TOK_GE expr

    TOK_EQ  shift, and go to state 79
    TOK_NE  shift, and go to state 80
    TOK_LT  shift, and go to state 81
    TOK_LE  shift, and go to state 82
    TOK_GT  shift, and go to state 83
    TOK_GE  shift, and go to state 84
    '+'     shift, and go to state 85
    '-'     shift, and go to state 86
    '*'     shift, and go to state 87
    '/'     shift, and go to state 88
    '%'     shift, and go to state 89
    '^'     shift, and go to state 90
    ';'     shift, and go to state 127


State 125

   46 untillp: TOK_UNTIL '(' expr ')' stat .

    $default  reduce using rule 46 (untillp)


State 126

   42 ifelse: TOK_IF '(' expr ')' stat TOK_ELSE . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 128
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 127

   45 forlp: TOK_FOR '(' declhead ';' expr ';' . assignhead ')' stat

    TOK_IDENT  shift, and go to state 129

    assignhead  go to state 130
    crement     go to state 25
    variable    go to state 34


State 128

   42 ifelse: TOK_IF '(' expr ')' stat TOK_ELSE stat .

    $default  reduce using rule 42 (ifelse)


State 129

   72 variable: TOK_IDENT .

    $default  reduce using rule 72 (variable)


State 130

   45 forlp: TOK_FOR '(' declhead ';' expr ';' assignhead . ')' stat

    ')'  shift, and go to state 131


State 131

   45 forlp: TOK_FOR '(' declhead ';' expr ';' assignhead ')' . stat

    TOK_INT     shift, and go to state 4
    TOK_STRING  shift, and go to state 5
    TOK_FLOAT   shift, and go to state 6
    TOK_IF      shift, and go to state 7
    TOK_WHILE   shift, and go to state 8
    TOK_FOR     shift, and go to state 9
    TOK_UNTIL   shift, and go to state 10
    TOK_RETURN  shift, and go to state 11
    TOK_IDENT   shift, and go to state 12
    ';'         shift, and go to state 13
    '{'         shift, and go to state 14

    stat        go to state 132
    block       go to state 17
    blockhead   go to state 18
    typeid      go to state 55
    type        go to state 20
    decl        go to state 21
    declhead    go to state 22
    assign      go to state 23
    assignhead  go to state 24
    crement     go to state 25
    callstmt    go to state 26
    call        go to state 27
    callhead    go to state 28
    ifelse      go to state 29
    whilelp     go to state 30
    forlp       go to state 31
    untillp     go to state 32
    return      go to state 33
    variable    go to state 34


State 132

   45 forlp: TOK_FOR '(' declhead ';' expr ';' assignhead ')' stat .

    $default  reduce using rule 45 (forlp)
