//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.11.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Meow.g4 by ANTLR 4.11.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.11.1")]
[System.CLSCompliant(false)]
public partial class MeowLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, WS=13, TOK_VOID=14, TOK_INT=15, TOK_FLOAT=16, 
		TOK_STRING=17, TOK_IF=18, TOK_ELSE=19, TOK_WHILE=20, TOK_FOR=21, TOK_RETURN=22, 
		TOK_NOT=23, TOK_ADDEQ=24, TOK_SUBEQ=25, TOK_INC=26, TOK_DEC=27, TOK_LT=28, 
		TOK_GT=29, TOK_EQ=30, TOK_NE=31, TOK_LE=32, TOK_GE=33, TOK_ARROW=34, TOK_INTCON=35, 
		TOK_FLOATCON=36, TOK_STRINGCON=37, TOK_IDENT=38, BAD_CHAR=39;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "WS", "TOK_VOID", "TOK_INT", "TOK_FLOAT", "TOK_STRING", 
		"TOK_IF", "TOK_ELSE", "TOK_WHILE", "TOK_FOR", "TOK_RETURN", "TOK_NOT", 
		"TOK_ADDEQ", "TOK_SUBEQ", "TOK_INC", "TOK_DEC", "TOK_LT", "TOK_GT", "TOK_EQ", 
		"TOK_NE", "TOK_LE", "TOK_GE", "TOK_ARROW", "TOK_INTCON", "TOK_FLOATCON", 
		"TOK_STRINGCON", "TOK_IDENT", "BAD_CHAR"
	};


	public MeowLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public MeowLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'('", "','", "')'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", null, "'void'", "'int'", "'float'", "'string'", "'if'", 
		"'else'", "'while'", "'for'", "'return'", "'not'", "'+='", "'-='", "'++'", 
		"'--'", "'<'", "'>'", "'=='", "'!='", "'<='", "'>='", "'->'", null, null, 
		"'\"IAMASTRING\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "TOK_VOID", "TOK_INT", "TOK_FLOAT", "TOK_STRING", "TOK_IF", 
		"TOK_ELSE", "TOK_WHILE", "TOK_FOR", "TOK_RETURN", "TOK_NOT", "TOK_ADDEQ", 
		"TOK_SUBEQ", "TOK_INC", "TOK_DEC", "TOK_LT", "TOK_GT", "TOK_EQ", "TOK_NE", 
		"TOK_LE", "TOK_GE", "TOK_ARROW", "TOK_INTCON", "TOK_FLOATCON", "TOK_STRINGCON", 
		"TOK_IDENT", "BAD_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Meow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static MeowLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,39,236,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
		7,35,2,36,7,36,2,37,7,37,2,38,7,38,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
		1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,4,
		12,105,8,12,11,12,12,12,106,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,14,1,
		14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,
		16,1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
		19,1,19,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,
		22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,
		26,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,31,1,
		32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,5,34,195,8,34,10,34,12,34,198,9,
		34,1,34,3,34,201,8,34,1,35,5,35,204,8,35,10,35,12,35,207,9,35,1,35,1,35,
		4,35,211,8,35,11,35,12,35,212,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
		1,36,1,36,1,36,1,36,1,36,1,37,1,37,5,37,230,8,37,10,37,12,37,233,9,37,
		1,38,1,38,0,0,39,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
		12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
		24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,
		36,73,37,75,38,77,39,1,0,5,3,0,9,10,13,13,32,32,1,0,49,57,1,0,48,57,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,241,0,1,1,0,0,0,0,3,
		1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
		0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,
		1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
		0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
		1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,
		0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,
		1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,1,79,1,0,0,
		0,3,81,1,0,0,0,5,83,1,0,0,0,7,85,1,0,0,0,9,87,1,0,0,0,11,89,1,0,0,0,13,
		91,1,0,0,0,15,93,1,0,0,0,17,95,1,0,0,0,19,97,1,0,0,0,21,99,1,0,0,0,23,
		101,1,0,0,0,25,104,1,0,0,0,27,110,1,0,0,0,29,115,1,0,0,0,31,119,1,0,0,
		0,33,125,1,0,0,0,35,132,1,0,0,0,37,135,1,0,0,0,39,140,1,0,0,0,41,146,1,
		0,0,0,43,150,1,0,0,0,45,157,1,0,0,0,47,161,1,0,0,0,49,164,1,0,0,0,51,167,
		1,0,0,0,53,170,1,0,0,0,55,173,1,0,0,0,57,175,1,0,0,0,59,177,1,0,0,0,61,
		180,1,0,0,0,63,183,1,0,0,0,65,186,1,0,0,0,67,189,1,0,0,0,69,200,1,0,0,
		0,71,205,1,0,0,0,73,214,1,0,0,0,75,227,1,0,0,0,77,234,1,0,0,0,79,80,5,
		123,0,0,80,2,1,0,0,0,81,82,5,125,0,0,82,4,1,0,0,0,83,84,5,59,0,0,84,6,
		1,0,0,0,85,86,5,61,0,0,86,8,1,0,0,0,87,88,5,40,0,0,88,10,1,0,0,0,89,90,
		5,44,0,0,90,12,1,0,0,0,91,92,5,41,0,0,92,14,1,0,0,0,93,94,5,43,0,0,94,
		16,1,0,0,0,95,96,5,45,0,0,96,18,1,0,0,0,97,98,5,42,0,0,98,20,1,0,0,0,99,
		100,5,47,0,0,100,22,1,0,0,0,101,102,5,94,0,0,102,24,1,0,0,0,103,105,7,
		0,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,
		107,108,1,0,0,0,108,109,6,12,0,0,109,26,1,0,0,0,110,111,5,118,0,0,111,
		112,5,111,0,0,112,113,5,105,0,0,113,114,5,100,0,0,114,28,1,0,0,0,115,116,
		5,105,0,0,116,117,5,110,0,0,117,118,5,116,0,0,118,30,1,0,0,0,119,120,5,
		102,0,0,120,121,5,108,0,0,121,122,5,111,0,0,122,123,5,97,0,0,123,124,5,
		116,0,0,124,32,1,0,0,0,125,126,5,115,0,0,126,127,5,116,0,0,127,128,5,114,
		0,0,128,129,5,105,0,0,129,130,5,110,0,0,130,131,5,103,0,0,131,34,1,0,0,
		0,132,133,5,105,0,0,133,134,5,102,0,0,134,36,1,0,0,0,135,136,5,101,0,0,
		136,137,5,108,0,0,137,138,5,115,0,0,138,139,5,101,0,0,139,38,1,0,0,0,140,
		141,5,119,0,0,141,142,5,104,0,0,142,143,5,105,0,0,143,144,5,108,0,0,144,
		145,5,101,0,0,145,40,1,0,0,0,146,147,5,102,0,0,147,148,5,111,0,0,148,149,
		5,114,0,0,149,42,1,0,0,0,150,151,5,114,0,0,151,152,5,101,0,0,152,153,5,
		116,0,0,153,154,5,117,0,0,154,155,5,114,0,0,155,156,5,110,0,0,156,44,1,
		0,0,0,157,158,5,110,0,0,158,159,5,111,0,0,159,160,5,116,0,0,160,46,1,0,
		0,0,161,162,5,43,0,0,162,163,5,61,0,0,163,48,1,0,0,0,164,165,5,45,0,0,
		165,166,5,61,0,0,166,50,1,0,0,0,167,168,5,43,0,0,168,169,5,43,0,0,169,
		52,1,0,0,0,170,171,5,45,0,0,171,172,5,45,0,0,172,54,1,0,0,0,173,174,5,
		60,0,0,174,56,1,0,0,0,175,176,5,62,0,0,176,58,1,0,0,0,177,178,5,61,0,0,
		178,179,5,61,0,0,179,60,1,0,0,0,180,181,5,33,0,0,181,182,5,61,0,0,182,
		62,1,0,0,0,183,184,5,60,0,0,184,185,5,61,0,0,185,64,1,0,0,0,186,187,5,
		62,0,0,187,188,5,61,0,0,188,66,1,0,0,0,189,190,5,45,0,0,190,191,5,62,0,
		0,191,68,1,0,0,0,192,196,7,1,0,0,193,195,7,2,0,0,194,193,1,0,0,0,195,198,
		1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,201,1,0,0,0,198,196,1,0,0,
		0,199,201,5,48,0,0,200,192,1,0,0,0,200,199,1,0,0,0,201,70,1,0,0,0,202,
		204,3,69,34,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,
		1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,210,5,46,0,0,209,211,3,69,
		34,0,210,209,1,0,0,0,211,212,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,0,213,
		72,1,0,0,0,214,215,5,34,0,0,215,216,5,73,0,0,216,217,5,65,0,0,217,218,
		5,77,0,0,218,219,5,65,0,0,219,220,5,83,0,0,220,221,5,84,0,0,221,222,5,
		82,0,0,222,223,5,73,0,0,223,224,5,78,0,0,224,225,5,71,0,0,225,226,5,34,
		0,0,226,74,1,0,0,0,227,231,7,3,0,0,228,230,7,4,0,0,229,228,1,0,0,0,230,
		233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,76,1,0,0,0,233,231,1,0,
		0,0,234,235,9,0,0,0,235,78,1,0,0,0,8,0,106,196,200,205,212,229,231,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
