//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\dinop\Documents\UCSC\meow\rewrite\java\Meow.g4 by ANTLR 4.9.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.2")]
[System.CLSCompliant(false)]
public partial class MeowParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, WS=13, TOK_VOID=14, TOK_INT=15, TOK_FLOAT=16, 
		TOK_STRING=17, TOK_IF=18, TOK_ELSE=19, TOK_WHILE=20, TOK_FOR=21, TOK_RETURN=22, 
		TOK_NOT=23, TOK_ADDEQ=24, TOK_SUBEQ=25, TOK_INC=26, TOK_DEC=27, TOK_LT=28, 
		TOK_GT=29, TOK_EQ=30, TOK_NE=31, TOK_LE=32, TOK_GE=33, TOK_ARROW=34, TOK_INTCON=35, 
		TOK_FLOATCON=36, TOK_STRINGCON=37, TOK_IDENT=38, BAD_CHAR=39;
	public const int
		RULE_prog = 0, RULE_stat = 1, RULE_block = 2, RULE_typeid = 3, RULE_type = 4, 
		RULE_decl = 5, RULE_declhead = 6, RULE_assign = 7, RULE_assignhead = 8, 
		RULE_crement = 9, RULE_callstmt = 10, RULE_call = 11, RULE_condition = 12, 
		RULE_ifelse = 13, RULE_whilelp = 14, RULE_forlp = 15, RULE_return = 16, 
		RULE_expr = 17, RULE_comp = 18, RULE_factor = 19, RULE_term = 20, RULE_expo = 21, 
		RULE_unop = 22, RULE_unit = 23, RULE_constant = 24, RULE_variable = 25;
	public static readonly string[] ruleNames = {
		"prog", "stat", "block", "typeid", "type", "decl", "declhead", "assign", 
		"assignhead", "crement", "callstmt", "call", "condition", "ifelse", "whilelp", 
		"forlp", "return", "expr", "comp", "factor", "term", "expo", "unop", "unit", 
		"constant", "variable"
	};

	private static readonly string[] _LiteralNames = {
		null, "'{'", "'}'", "';'", "'='", "'('", "','", "')'", "'+'", "'-'", "'*'", 
		"'/'", "'^'", null, "'void'", "'int'", "'float'", "'string'", "'if'", 
		"'else'", "'while'", "'for'", "'return'", "'not'", "'+='", "'-='", "'++'", 
		"'--'", "'<'", "'>'", "'=='", "'!='", "'<='", "'>='", "'->'", null, null, 
		"'\"IAMASTRING\"'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, "WS", "TOK_VOID", "TOK_INT", "TOK_FLOAT", "TOK_STRING", "TOK_IF", 
		"TOK_ELSE", "TOK_WHILE", "TOK_FOR", "TOK_RETURN", "TOK_NOT", "TOK_ADDEQ", 
		"TOK_SUBEQ", "TOK_INC", "TOK_DEC", "TOK_LT", "TOK_GT", "TOK_EQ", "TOK_NE", 
		"TOK_LE", "TOK_GE", "TOK_ARROW", "TOK_INTCON", "TOK_FLOATCON", "TOK_STRINGCON", 
		"TOK_IDENT", "BAD_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Meow.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static MeowParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public MeowParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public MeowParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public ProgContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prog; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterProg(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitProg(this);
		}
	}

	[RuleVersion(0)]
	public ProgContext prog() {
		ProgContext _localctx = new ProgContext(Context, State);
		EnterRule(_localctx, 0, RULE_prog);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << TOK_INT) | (1L << TOK_FLOAT) | (1L << TOK_STRING) | (1L << TOK_IF) | (1L << TOK_WHILE) | (1L << TOK_RETURN) | (1L << TOK_IDENT))) != 0)) {
				{
				{
				State = 52;
				stat();
				}
				}
				State = 57;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclContext decl() {
			return GetRuleContext<DeclContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignContext assign() {
			return GetRuleContext<AssignContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CallstmtContext callstmt() {
			return GetRuleContext<CallstmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfelseContext ifelse() {
			return GetRuleContext<IfelseContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhilelpContext whilelp() {
			return GetRuleContext<WhilelpContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnContext @return() {
			return GetRuleContext<ReturnContext>(0);
		}
		public StatContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stat; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterStat(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitStat(this);
		}
	}

	[RuleVersion(0)]
	public StatContext stat() {
		StatContext _localctx = new StatContext(Context, State);
		EnterRule(_localctx, 2, RULE_stat);
		try {
			State = 65;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 58;
				decl();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				assign();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 60;
				block();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 61;
				callstmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 62;
				ifelse();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 63;
				whilelp();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 64;
				@return();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterBlock(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitBlock(this);
		}
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 4, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67;
			Match(T__0);
			State = 71;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << TOK_INT) | (1L << TOK_FLOAT) | (1L << TOK_STRING) | (1L << TOK_IF) | (1L << TOK_WHILE) | (1L << TOK_RETURN) | (1L << TOK_IDENT))) != 0)) {
				{
				{
				State = 68;
				stat();
				}
				}
				State = 73;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 74;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeidContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_IDENT() { return GetToken(MeowParser.TOK_IDENT, 0); }
		public TypeidContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_typeid; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterTypeid(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitTypeid(this);
		}
	}

	[RuleVersion(0)]
	public TypeidContext typeid() {
		TypeidContext _localctx = new TypeidContext(Context, State);
		EnterRule(_localctx, 6, RULE_typeid);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 76;
			type();
			State = 77;
			Match(TOK_IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_INT() { return GetToken(MeowParser.TOK_INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_FLOAT() { return GetToken(MeowParser.TOK_FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_STRING() { return GetToken(MeowParser.TOK_STRING, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterType(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitType(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 8, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOK_INT) | (1L << TOK_FLOAT) | (1L << TOK_STRING))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclheadContext declhead() {
			return GetRuleContext<DeclheadContext>(0);
		}
		public DeclContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decl; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterDecl(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitDecl(this);
		}
	}

	[RuleVersion(0)]
	public DeclContext decl() {
		DeclContext _localctx = new DeclContext(Context, State);
		EnterRule(_localctx, 10, RULE_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81;
			declhead();
			State = 82;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DeclheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeidContext typeid() {
			return GetRuleContext<TypeidContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public DeclheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declhead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterDeclhead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitDeclhead(this);
		}
	}

	[RuleVersion(0)]
	public DeclheadContext declhead() {
		DeclheadContext _localctx = new DeclheadContext(Context, State);
		EnterRule(_localctx, 12, RULE_declhead);
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 84;
				typeid();
				State = 85;
				Match(T__3);
				State = 86;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 88;
				typeid();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public AssignheadContext assignhead() {
			return GetRuleContext<AssignheadContext>(0);
		}
		public AssignContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assign; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterAssign(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitAssign(this);
		}
	}

	[RuleVersion(0)]
	public AssignContext assign() {
		AssignContext _localctx = new AssignContext(Context, State);
		EnterRule(_localctx, 14, RULE_assign);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			assignhead();
			State = 92;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignheadContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CrementContext crement() {
			return GetRuleContext<CrementContext>(0);
		}
		public AssignheadContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignhead; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterAssignhead(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitAssignhead(this);
		}
	}

	[RuleVersion(0)]
	public AssignheadContext assignhead() {
		AssignheadContext _localctx = new AssignheadContext(Context, State);
		EnterRule(_localctx, 16, RULE_assignhead);
		try {
			State = 99;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 94;
				variable();
				State = 95;
				Match(T__3);
				State = 96;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 98;
				crement();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_ADDEQ() { return GetToken(MeowParser.TOK_ADDEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_SUBEQ() { return GetToken(MeowParser.TOK_SUBEQ, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_INC() { return GetToken(MeowParser.TOK_INC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_DEC() { return GetToken(MeowParser.TOK_DEC, 0); }
		public CrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_crement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterCrement(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitCrement(this);
		}
	}

	[RuleVersion(0)]
	public CrementContext crement() {
		CrementContext _localctx = new CrementContext(Context, State);
		EnterRule(_localctx, 18, RULE_crement);
		try {
			State = 115;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 101;
				variable();
				State = 102;
				Match(TOK_ADDEQ);
				State = 103;
				expr();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 105;
				variable();
				State = 106;
				Match(TOK_SUBEQ);
				State = 107;
				expr();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 109;
				variable();
				State = 110;
				Match(TOK_INC);
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 112;
				variable();
				State = 113;
				Match(TOK_DEC);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallstmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public CallContext call() {
			return GetRuleContext<CallContext>(0);
		}
		public CallstmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_callstmt; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterCallstmt(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitCallstmt(this);
		}
	}

	[RuleVersion(0)]
	public CallstmtContext callstmt() {
		CallstmtContext _localctx = new CallstmtContext(Context, State);
		EnterRule(_localctx, 20, RULE_callstmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 117;
			call();
			State = 118;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_IDENT() { return GetToken(MeowParser.TOK_IDENT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public CallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_call; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterCall(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitCall(this);
		}
	}

	[RuleVersion(0)]
	public CallContext call() {
		CallContext _localctx = new CallContext(Context, State);
		EnterRule(_localctx, 22, RULE_call);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(TOK_IDENT);
			State = 121;
			Match(T__4);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << TOK_NOT) | (1L << TOK_INTCON) | (1L << TOK_FLOATCON) | (1L << TOK_STRINGCON) | (1L << TOK_IDENT))) != 0)) {
				{
				State = 122;
				expr();
				}
			}

			State = 129;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__5) {
				{
				{
				State = 125;
				Match(T__5);
				State = 126;
				expr();
				}
				}
				State = 131;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 132;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConditionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ConditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_condition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterCondition(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitCondition(this);
		}
	}

	[RuleVersion(0)]
	public ConditionContext condition() {
		ConditionContext _localctx = new ConditionContext(Context, State);
		EnterRule(_localctx, 24, RULE_condition);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 134;
			Match(T__4);
			State = 135;
			expr();
			State = 136;
			Match(T__6);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfelseContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_IF() { return GetToken(MeowParser.TOK_IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext[] stat() {
			return GetRuleContexts<StatContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat(int i) {
			return GetRuleContext<StatContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_ELSE() { return GetToken(MeowParser.TOK_ELSE, 0); }
		public IfelseContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifelse; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterIfelse(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitIfelse(this);
		}
	}

	[RuleVersion(0)]
	public IfelseContext ifelse() {
		IfelseContext _localctx = new IfelseContext(Context, State);
		EnterRule(_localctx, 26, RULE_ifelse);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			Match(TOK_IF);
			State = 139;
			condition();
			State = 140;
			stat();
			State = 143;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,8,Context) ) {
			case 1:
				{
				State = 141;
				Match(TOK_ELSE);
				State = 142;
				stat();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhilelpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_WHILE() { return GetToken(MeowParser.TOK_WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ConditionContext condition() {
			return GetRuleContext<ConditionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public WhilelpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whilelp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterWhilelp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitWhilelp(this);
		}
	}

	[RuleVersion(0)]
	public WhilelpContext whilelp() {
		WhilelpContext _localctx = new WhilelpContext(Context, State);
		EnterRule(_localctx, 28, RULE_whilelp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(TOK_WHILE);
			State = 146;
			condition();
			State = 147;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForlpContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_FOR() { return GetToken(MeowParser.TOK_FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public DeclheadContext declhead() {
			return GetRuleContext<DeclheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignheadContext assignhead() {
			return GetRuleContext<AssignheadContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatContext stat() {
			return GetRuleContext<StatContext>(0);
		}
		public ForlpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forlp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterForlp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitForlp(this);
		}
	}

	[RuleVersion(0)]
	public ForlpContext forlp() {
		ForlpContext _localctx = new ForlpContext(Context, State);
		EnterRule(_localctx, 30, RULE_forlp);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 149;
			Match(TOK_FOR);
			State = 150;
			Match(T__4);
			State = 151;
			declhead();
			State = 152;
			Match(T__2);
			State = 153;
			expr();
			State = 154;
			Match(T__2);
			State = 155;
			assignhead();
			State = 156;
			Match(T__6);
			State = 157;
			stat();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_RETURN() { return GetToken(MeowParser.TOK_RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ReturnContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterReturn(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitReturn(this);
		}
	}

	[RuleVersion(0)]
	public ReturnContext @return() {
		ReturnContext _localctx = new ReturnContext(Context, State);
		EnterRule(_localctx, 32, RULE_return);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159;
			Match(TOK_RETURN);
			State = 161;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__7) | (1L << T__8) | (1L << TOK_NOT) | (1L << TOK_INTCON) | (1L << TOK_FLOATCON) | (1L << TOK_STRINGCON) | (1L << TOK_IDENT))) != 0)) {
				{
				State = 160;
				expr();
				}
			}

			State = 163;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public CompContext[] comp() {
			return GetRuleContexts<CompContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompContext comp(int i) {
			return GetRuleContext<CompContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_EQ() { return GetTokens(MeowParser.TOK_EQ); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_EQ(int i) {
			return GetToken(MeowParser.TOK_EQ, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_NE() { return GetTokens(MeowParser.TOK_NE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_NE(int i) {
			return GetToken(MeowParser.TOK_NE, i);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 34, RULE_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 165;
			comp();
			State = 170;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==TOK_EQ || _la==TOK_NE) {
				{
				{
				State = 166;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==TOK_EQ || _la==TOK_NE) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 167;
				comp();
				}
				}
				State = 172;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext[] factor() {
			return GetRuleContexts<FactorContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FactorContext factor(int i) {
			return GetRuleContext<FactorContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_LT() { return GetTokens(MeowParser.TOK_LT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_LT(int i) {
			return GetToken(MeowParser.TOK_LT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_GT() { return GetTokens(MeowParser.TOK_GT); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_GT(int i) {
			return GetToken(MeowParser.TOK_GT, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_LE() { return GetTokens(MeowParser.TOK_LE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_LE(int i) {
			return GetToken(MeowParser.TOK_LE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] TOK_GE() { return GetTokens(MeowParser.TOK_GE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_GE(int i) {
			return GetToken(MeowParser.TOK_GE, i);
		}
		public CompContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_comp; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterComp(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitComp(this);
		}
	}

	[RuleVersion(0)]
	public CompContext comp() {
		CompContext _localctx = new CompContext(Context, State);
		EnterRule(_localctx, 36, RULE_comp);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173;
			factor();
			State = 178;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOK_LT) | (1L << TOK_GT) | (1L << TOK_LE) | (1L << TOK_GE))) != 0)) {
				{
				{
				State = 174;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOK_LT) | (1L << TOK_GT) | (1L << TOK_LE) | (1L << TOK_GE))) != 0)) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 175;
				factor();
				}
				}
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FactorContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public TermContext[] term() {
			return GetRuleContexts<TermContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TermContext term(int i) {
			return GetRuleContext<TermContext>(i);
		}
		public FactorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_factor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterFactor(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitFactor(this);
		}
	}

	[RuleVersion(0)]
	public FactorContext factor() {
		FactorContext _localctx = new FactorContext(Context, State);
		EnterRule(_localctx, 38, RULE_factor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 181;
			term();
			State = 186;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__7 || _la==T__8) {
				{
				{
				State = 182;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__7 || _la==T__8) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 183;
				term();
				}
				}
				State = 188;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public ExpoContext[] expo() {
			return GetRuleContexts<ExpoContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpoContext expo(int i) {
			return GetRuleContext<ExpoContext>(i);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 40, RULE_term);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 189;
			expo();
			State = 194;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__9 || _la==T__10) {
				{
				{
				State = 190;
				_localctx.op = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==T__9 || _la==T__10) ) {
					_localctx.op = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 191;
				expo();
				}
				}
				State = 196;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpoContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnopContext[] unop() {
			return GetRuleContexts<UnopContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public UnopContext unop(int i) {
			return GetRuleContext<UnopContext>(i);
		}
		public ExpoContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expo; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterExpo(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitExpo(this);
		}
	}

	[RuleVersion(0)]
	public ExpoContext expo() {
		ExpoContext _localctx = new ExpoContext(Context, State);
		EnterRule(_localctx, 42, RULE_expo);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 197;
			unop();
			State = 202;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__11) {
				{
				{
				State = 198;
				Match(T__11);
				State = 199;
				unop();
				}
				}
				State = 204;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnopContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public UnitContext unit() {
			return GetRuleContext<UnitContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_NOT() { return GetToken(MeowParser.TOK_NOT, 0); }
		public UnopContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unop; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterUnop(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitUnop(this);
		}
	}

	[RuleVersion(0)]
	public UnopContext unop() {
		UnopContext _localctx = new UnopContext(Context, State);
		EnterRule(_localctx, 44, RULE_unop);
		try {
			State = 212;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__7:
				EnterOuterAlt(_localctx, 1);
				{
				State = 205;
				Match(T__7);
				State = 206;
				unit();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 2);
				{
				State = 207;
				Match(T__8);
				State = 208;
				unit();
				}
				break;
			case TOK_NOT:
				EnterOuterAlt(_localctx, 3);
				{
				State = 209;
				Match(TOK_NOT);
				State = 210;
				unit();
				}
				break;
			case T__4:
			case TOK_INTCON:
			case TOK_FLOATCON:
			case TOK_STRINGCON:
			case TOK_IDENT:
				EnterOuterAlt(_localctx, 4);
				{
				State = 211;
				unit();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnitContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ConstantContext constant() {
			return GetRuleContext<ConstantContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public VariableContext variable() {
			return GetRuleContext<VariableContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public UnitContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterUnit(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitUnit(this);
		}
	}

	[RuleVersion(0)]
	public UnitContext unit() {
		UnitContext _localctx = new UnitContext(Context, State);
		EnterRule(_localctx, 46, RULE_unit);
		try {
			State = 220;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case TOK_INTCON:
			case TOK_FLOATCON:
			case TOK_STRINGCON:
				EnterOuterAlt(_localctx, 1);
				{
				State = 214;
				constant();
				}
				break;
			case TOK_IDENT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 215;
				variable();
				}
				break;
			case T__4:
				EnterOuterAlt(_localctx, 3);
				{
				State = 216;
				Match(T__4);
				State = 217;
				expr();
				State = 218;
				Match(T__6);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstantContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_INTCON() { return GetToken(MeowParser.TOK_INTCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_FLOATCON() { return GetToken(MeowParser.TOK_FLOATCON, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_STRINGCON() { return GetToken(MeowParser.TOK_STRINGCON, 0); }
		public ConstantContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constant; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterConstant(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitConstant(this);
		}
	}

	[RuleVersion(0)]
	public ConstantContext constant() {
		ConstantContext _localctx = new ConstantContext(Context, State);
		EnterRule(_localctx, 48, RULE_constant);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 222;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << TOK_INTCON) | (1L << TOK_FLOATCON) | (1L << TOK_STRINGCON))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TOK_IDENT() { return GetToken(MeowParser.TOK_IDENT, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_variable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.EnterVariable(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			IMeowListener typedListener = listener as IMeowListener;
			if (typedListener != null) typedListener.ExitVariable(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(Context, State);
		EnterRule(_localctx, 50, RULE_variable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 224;
			Match(TOK_IDENT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', ')', '\xE5', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x4', '\x12', '\t', '\x12', '\x4', '\x13', '\t', 
		'\x13', '\x4', '\x14', '\t', '\x14', '\x4', '\x15', '\t', '\x15', '\x4', 
		'\x16', '\t', '\x16', '\x4', '\x17', '\t', '\x17', '\x4', '\x18', '\t', 
		'\x18', '\x4', '\x19', '\t', '\x19', '\x4', '\x1A', '\t', '\x1A', '\x4', 
		'\x1B', '\t', '\x1B', '\x3', '\x2', '\a', '\x2', '\x38', '\n', '\x2', 
		'\f', '\x2', '\xE', '\x2', ';', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x5', '\x3', '\x44', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', '\a', '\x4', 
		'H', '\n', '\x4', '\f', '\x4', '\xE', '\x4', 'K', '\v', '\x4', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\\', 
		'\n', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x66', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x3', 
		'\v', '\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', 'v', '\n', '\v', 
		'\x3', '\f', '\x3', '\f', '\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', 
		'\r', '\x5', '\r', '~', '\n', '\r', '\x3', '\r', '\x3', '\r', '\a', '\r', 
		'\x82', '\n', '\r', '\f', '\r', '\xE', '\r', '\x85', '\v', '\r', '\x3', 
		'\r', '\x3', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', 
		'\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', '\x3', '\xF', 
		'\x5', '\xF', '\x92', '\n', '\xF', '\x3', '\x10', '\x3', '\x10', '\x3', 
		'\x10', '\x3', '\x10', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x3', 
		'\x11', '\x3', '\x11', '\x3', '\x12', '\x3', '\x12', '\x5', '\x12', '\xA4', 
		'\n', '\x12', '\x3', '\x12', '\x3', '\x12', '\x3', '\x13', '\x3', '\x13', 
		'\x3', '\x13', '\a', '\x13', '\xAB', '\n', '\x13', '\f', '\x13', '\xE', 
		'\x13', '\xAE', '\v', '\x13', '\x3', '\x14', '\x3', '\x14', '\x3', '\x14', 
		'\a', '\x14', '\xB3', '\n', '\x14', '\f', '\x14', '\xE', '\x14', '\xB6', 
		'\v', '\x14', '\x3', '\x15', '\x3', '\x15', '\x3', '\x15', '\a', '\x15', 
		'\xBB', '\n', '\x15', '\f', '\x15', '\xE', '\x15', '\xBE', '\v', '\x15', 
		'\x3', '\x16', '\x3', '\x16', '\x3', '\x16', '\a', '\x16', '\xC3', '\n', 
		'\x16', '\f', '\x16', '\xE', '\x16', '\xC6', '\v', '\x16', '\x3', '\x17', 
		'\x3', '\x17', '\x3', '\x17', '\a', '\x17', '\xCB', '\n', '\x17', '\f', 
		'\x17', '\xE', '\x17', '\xCE', '\v', '\x17', '\x3', '\x18', '\x3', '\x18', 
		'\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', '\x3', '\x18', 
		'\x5', '\x18', '\xD7', '\n', '\x18', '\x3', '\x19', '\x3', '\x19', '\x3', 
		'\x19', '\x3', '\x19', '\x3', '\x19', '\x3', '\x19', '\x5', '\x19', '\xDF', 
		'\n', '\x19', '\x3', '\x1A', '\x3', '\x1A', '\x3', '\x1B', '\x3', '\x1B', 
		'\x3', '\x1B', '\x2', '\x2', '\x1C', '\x2', '\x4', '\x6', '\b', '\n', 
		'\f', '\xE', '\x10', '\x12', '\x14', '\x16', '\x18', '\x1A', '\x1C', '\x1E', 
		' ', '\"', '$', '&', '(', '*', ',', '.', '\x30', '\x32', '\x34', '\x2', 
		'\b', '\x3', '\x2', '\x11', '\x13', '\x3', '\x2', ' ', '!', '\x4', '\x2', 
		'\x1E', '\x1F', '\"', '#', '\x3', '\x2', '\n', '\v', '\x3', '\x2', '\f', 
		'\r', '\x3', '\x2', '%', '\'', '\x2', '\xE5', '\x2', '\x39', '\x3', '\x2', 
		'\x2', '\x2', '\x4', '\x43', '\x3', '\x2', '\x2', '\x2', '\x6', '\x45', 
		'\x3', '\x2', '\x2', '\x2', '\b', 'N', '\x3', '\x2', '\x2', '\x2', '\n', 
		'Q', '\x3', '\x2', '\x2', '\x2', '\f', 'S', '\x3', '\x2', '\x2', '\x2', 
		'\xE', '[', '\x3', '\x2', '\x2', '\x2', '\x10', ']', '\x3', '\x2', '\x2', 
		'\x2', '\x12', '\x65', '\x3', '\x2', '\x2', '\x2', '\x14', 'u', '\x3', 
		'\x2', '\x2', '\x2', '\x16', 'w', '\x3', '\x2', '\x2', '\x2', '\x18', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x88', '\x3', '\x2', '\x2', 
		'\x2', '\x1C', '\x8C', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x93', '\x3', 
		'\x2', '\x2', '\x2', ' ', '\x97', '\x3', '\x2', '\x2', '\x2', '\"', '\xA1', 
		'\x3', '\x2', '\x2', '\x2', '$', '\xA7', '\x3', '\x2', '\x2', '\x2', '&', 
		'\xAF', '\x3', '\x2', '\x2', '\x2', '(', '\xB7', '\x3', '\x2', '\x2', 
		'\x2', '*', '\xBF', '\x3', '\x2', '\x2', '\x2', ',', '\xC7', '\x3', '\x2', 
		'\x2', '\x2', '.', '\xD6', '\x3', '\x2', '\x2', '\x2', '\x30', '\xDE', 
		'\x3', '\x2', '\x2', '\x2', '\x32', '\xE0', '\x3', '\x2', '\x2', '\x2', 
		'\x34', '\xE2', '\x3', '\x2', '\x2', '\x2', '\x36', '\x38', '\x5', '\x4', 
		'\x3', '\x2', '\x37', '\x36', '\x3', '\x2', '\x2', '\x2', '\x38', ';', 
		'\x3', '\x2', '\x2', '\x2', '\x39', '\x37', '\x3', '\x2', '\x2', '\x2', 
		'\x39', ':', '\x3', '\x2', '\x2', '\x2', ':', '\x3', '\x3', '\x2', '\x2', 
		'\x2', ';', '\x39', '\x3', '\x2', '\x2', '\x2', '<', '\x44', '\x5', '\f', 
		'\a', '\x2', '=', '\x44', '\x5', '\x10', '\t', '\x2', '>', '\x44', '\x5', 
		'\x6', '\x4', '\x2', '?', '\x44', '\x5', '\x16', '\f', '\x2', '@', '\x44', 
		'\x5', '\x1C', '\xF', '\x2', '\x41', '\x44', '\x5', '\x1E', '\x10', '\x2', 
		'\x42', '\x44', '\x5', '\"', '\x12', '\x2', '\x43', '<', '\x3', '\x2', 
		'\x2', '\x2', '\x43', '=', '\x3', '\x2', '\x2', '\x2', '\x43', '>', '\x3', 
		'\x2', '\x2', '\x2', '\x43', '?', '\x3', '\x2', '\x2', '\x2', '\x43', 
		'@', '\x3', '\x2', '\x2', '\x2', '\x43', '\x41', '\x3', '\x2', '\x2', 
		'\x2', '\x43', '\x42', '\x3', '\x2', '\x2', '\x2', '\x44', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '\x45', 'I', '\a', '\x3', '\x2', '\x2', '\x46', 'H', 
		'\x5', '\x4', '\x3', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'H', 
		'K', '\x3', '\x2', '\x2', '\x2', 'I', 'G', '\x3', '\x2', '\x2', '\x2', 
		'I', 'J', '\x3', '\x2', '\x2', '\x2', 'J', 'L', '\x3', '\x2', '\x2', '\x2', 
		'K', 'I', '\x3', '\x2', '\x2', '\x2', 'L', 'M', '\a', '\x4', '\x2', '\x2', 
		'M', '\a', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x5', '\n', '\x6', '\x2', 
		'O', 'P', '\a', '(', '\x2', '\x2', 'P', '\t', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\t', '\x2', '\x2', '\x2', 'R', '\v', '\x3', '\x2', '\x2', '\x2', 
		'S', 'T', '\x5', '\xE', '\b', '\x2', 'T', 'U', '\a', '\x5', '\x2', '\x2', 
		'U', '\r', '\x3', '\x2', '\x2', '\x2', 'V', 'W', '\x5', '\b', '\x5', '\x2', 
		'W', 'X', '\a', '\x6', '\x2', '\x2', 'X', 'Y', '\x5', '$', '\x13', '\x2', 
		'Y', '\\', '\x3', '\x2', '\x2', '\x2', 'Z', '\\', '\x5', '\b', '\x5', 
		'\x2', '[', 'V', '\x3', '\x2', '\x2', '\x2', '[', 'Z', '\x3', '\x2', '\x2', 
		'\x2', '\\', '\xF', '\x3', '\x2', '\x2', '\x2', ']', '^', '\x5', '\x12', 
		'\n', '\x2', '^', '_', '\a', '\x5', '\x2', '\x2', '_', '\x11', '\x3', 
		'\x2', '\x2', '\x2', '`', '\x61', '\x5', '\x34', '\x1B', '\x2', '\x61', 
		'\x62', '\a', '\x6', '\x2', '\x2', '\x62', '\x63', '\x5', '$', '\x13', 
		'\x2', '\x63', '\x66', '\x3', '\x2', '\x2', '\x2', '\x64', '\x66', '\x5', 
		'\x14', '\v', '\x2', '\x65', '`', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x64', '\x3', '\x2', '\x2', '\x2', '\x66', '\x13', '\x3', '\x2', '\x2', 
		'\x2', 'g', 'h', '\x5', '\x34', '\x1B', '\x2', 'h', 'i', '\a', '\x1A', 
		'\x2', '\x2', 'i', 'j', '\x5', '$', '\x13', '\x2', 'j', 'v', '\x3', '\x2', 
		'\x2', '\x2', 'k', 'l', '\x5', '\x34', '\x1B', '\x2', 'l', 'm', '\a', 
		'\x1B', '\x2', '\x2', 'm', 'n', '\x5', '$', '\x13', '\x2', 'n', 'v', '\x3', 
		'\x2', '\x2', '\x2', 'o', 'p', '\x5', '\x34', '\x1B', '\x2', 'p', 'q', 
		'\a', '\x1C', '\x2', '\x2', 'q', 'v', '\x3', '\x2', '\x2', '\x2', 'r', 
		's', '\x5', '\x34', '\x1B', '\x2', 's', 't', '\a', '\x1D', '\x2', '\x2', 
		't', 'v', '\x3', '\x2', '\x2', '\x2', 'u', 'g', '\x3', '\x2', '\x2', '\x2', 
		'u', 'k', '\x3', '\x2', '\x2', '\x2', 'u', 'o', '\x3', '\x2', '\x2', '\x2', 
		'u', 'r', '\x3', '\x2', '\x2', '\x2', 'v', '\x15', '\x3', '\x2', '\x2', 
		'\x2', 'w', 'x', '\x5', '\x18', '\r', '\x2', 'x', 'y', '\a', '\x5', '\x2', 
		'\x2', 'y', '\x17', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\a', '(', '\x2', 
		'\x2', '{', '}', '\a', '\a', '\x2', '\x2', '|', '~', '\x5', '$', '\x13', 
		'\x2', '}', '|', '\x3', '\x2', '\x2', '\x2', '}', '~', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x83', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x80', '\a', 
		'\b', '\x2', '\x2', '\x80', '\x82', '\x5', '$', '\x13', '\x2', '\x81', 
		'\x7F', '\x3', '\x2', '\x2', '\x2', '\x82', '\x85', '\x3', '\x2', '\x2', 
		'\x2', '\x83', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x84', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x86', '\x3', '\x2', '\x2', '\x2', '\x85', 
		'\x83', '\x3', '\x2', '\x2', '\x2', '\x86', '\x87', '\a', '\t', '\x2', 
		'\x2', '\x87', '\x19', '\x3', '\x2', '\x2', '\x2', '\x88', '\x89', '\a', 
		'\a', '\x2', '\x2', '\x89', '\x8A', '\x5', '$', '\x13', '\x2', '\x8A', 
		'\x8B', '\a', '\t', '\x2', '\x2', '\x8B', '\x1B', '\x3', '\x2', '\x2', 
		'\x2', '\x8C', '\x8D', '\a', '\x14', '\x2', '\x2', '\x8D', '\x8E', '\x5', 
		'\x1A', '\xE', '\x2', '\x8E', '\x91', '\x5', '\x4', '\x3', '\x2', '\x8F', 
		'\x90', '\a', '\x15', '\x2', '\x2', '\x90', '\x92', '\x5', '\x4', '\x3', 
		'\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x91', '\x92', '\x3', 
		'\x2', '\x2', '\x2', '\x92', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x93', 
		'\x94', '\a', '\x16', '\x2', '\x2', '\x94', '\x95', '\x5', '\x1A', '\xE', 
		'\x2', '\x95', '\x96', '\x5', '\x4', '\x3', '\x2', '\x96', '\x1F', '\x3', 
		'\x2', '\x2', '\x2', '\x97', '\x98', '\a', '\x17', '\x2', '\x2', '\x98', 
		'\x99', '\a', '\a', '\x2', '\x2', '\x99', '\x9A', '\x5', '\xE', '\b', 
		'\x2', '\x9A', '\x9B', '\a', '\x5', '\x2', '\x2', '\x9B', '\x9C', '\x5', 
		'$', '\x13', '\x2', '\x9C', '\x9D', '\a', '\x5', '\x2', '\x2', '\x9D', 
		'\x9E', '\x5', '\x12', '\n', '\x2', '\x9E', '\x9F', '\a', '\t', '\x2', 
		'\x2', '\x9F', '\xA0', '\x5', '\x4', '\x3', '\x2', '\xA0', '!', '\x3', 
		'\x2', '\x2', '\x2', '\xA1', '\xA3', '\a', '\x18', '\x2', '\x2', '\xA2', 
		'\xA4', '\x5', '$', '\x13', '\x2', '\xA3', '\xA2', '\x3', '\x2', '\x2', 
		'\x2', '\xA3', '\xA4', '\x3', '\x2', '\x2', '\x2', '\xA4', '\xA5', '\x3', 
		'\x2', '\x2', '\x2', '\xA5', '\xA6', '\a', '\x5', '\x2', '\x2', '\xA6', 
		'#', '\x3', '\x2', '\x2', '\x2', '\xA7', '\xAC', '\x5', '&', '\x14', '\x2', 
		'\xA8', '\xA9', '\t', '\x3', '\x2', '\x2', '\xA9', '\xAB', '\x5', '&', 
		'\x14', '\x2', '\xAA', '\xA8', '\x3', '\x2', '\x2', '\x2', '\xAB', '\xAE', 
		'\x3', '\x2', '\x2', '\x2', '\xAC', '\xAA', '\x3', '\x2', '\x2', '\x2', 
		'\xAC', '\xAD', '\x3', '\x2', '\x2', '\x2', '\xAD', '%', '\x3', '\x2', 
		'\x2', '\x2', '\xAE', '\xAC', '\x3', '\x2', '\x2', '\x2', '\xAF', '\xB4', 
		'\x5', '(', '\x15', '\x2', '\xB0', '\xB1', '\t', '\x4', '\x2', '\x2', 
		'\xB1', '\xB3', '\x5', '(', '\x15', '\x2', '\xB2', '\xB0', '\x3', '\x2', 
		'\x2', '\x2', '\xB3', '\xB6', '\x3', '\x2', '\x2', '\x2', '\xB4', '\xB2', 
		'\x3', '\x2', '\x2', '\x2', '\xB4', '\xB5', '\x3', '\x2', '\x2', '\x2', 
		'\xB5', '\'', '\x3', '\x2', '\x2', '\x2', '\xB6', '\xB4', '\x3', '\x2', 
		'\x2', '\x2', '\xB7', '\xBC', '\x5', '*', '\x16', '\x2', '\xB8', '\xB9', 
		'\t', '\x5', '\x2', '\x2', '\xB9', '\xBB', '\x5', '*', '\x16', '\x2', 
		'\xBA', '\xB8', '\x3', '\x2', '\x2', '\x2', '\xBB', '\xBE', '\x3', '\x2', 
		'\x2', '\x2', '\xBC', '\xBA', '\x3', '\x2', '\x2', '\x2', '\xBC', '\xBD', 
		'\x3', '\x2', '\x2', '\x2', '\xBD', ')', '\x3', '\x2', '\x2', '\x2', '\xBE', 
		'\xBC', '\x3', '\x2', '\x2', '\x2', '\xBF', '\xC4', '\x5', ',', '\x17', 
		'\x2', '\xC0', '\xC1', '\t', '\x6', '\x2', '\x2', '\xC1', '\xC3', '\x5', 
		',', '\x17', '\x2', '\xC2', '\xC0', '\x3', '\x2', '\x2', '\x2', '\xC3', 
		'\xC6', '\x3', '\x2', '\x2', '\x2', '\xC4', '\xC2', '\x3', '\x2', '\x2', 
		'\x2', '\xC4', '\xC5', '\x3', '\x2', '\x2', '\x2', '\xC5', '+', '\x3', 
		'\x2', '\x2', '\x2', '\xC6', '\xC4', '\x3', '\x2', '\x2', '\x2', '\xC7', 
		'\xCC', '\x5', '.', '\x18', '\x2', '\xC8', '\xC9', '\a', '\xE', '\x2', 
		'\x2', '\xC9', '\xCB', '\x5', '.', '\x18', '\x2', '\xCA', '\xC8', '\x3', 
		'\x2', '\x2', '\x2', '\xCB', '\xCE', '\x3', '\x2', '\x2', '\x2', '\xCC', 
		'\xCA', '\x3', '\x2', '\x2', '\x2', '\xCC', '\xCD', '\x3', '\x2', '\x2', 
		'\x2', '\xCD', '-', '\x3', '\x2', '\x2', '\x2', '\xCE', '\xCC', '\x3', 
		'\x2', '\x2', '\x2', '\xCF', '\xD0', '\a', '\n', '\x2', '\x2', '\xD0', 
		'\xD7', '\x5', '\x30', '\x19', '\x2', '\xD1', '\xD2', '\a', '\v', '\x2', 
		'\x2', '\xD2', '\xD7', '\x5', '\x30', '\x19', '\x2', '\xD3', '\xD4', '\a', 
		'\x19', '\x2', '\x2', '\xD4', '\xD7', '\x5', '\x30', '\x19', '\x2', '\xD5', 
		'\xD7', '\x5', '\x30', '\x19', '\x2', '\xD6', '\xCF', '\x3', '\x2', '\x2', 
		'\x2', '\xD6', '\xD1', '\x3', '\x2', '\x2', '\x2', '\xD6', '\xD3', '\x3', 
		'\x2', '\x2', '\x2', '\xD6', '\xD5', '\x3', '\x2', '\x2', '\x2', '\xD7', 
		'/', '\x3', '\x2', '\x2', '\x2', '\xD8', '\xDF', '\x5', '\x32', '\x1A', 
		'\x2', '\xD9', '\xDF', '\x5', '\x34', '\x1B', '\x2', '\xDA', '\xDB', '\a', 
		'\a', '\x2', '\x2', '\xDB', '\xDC', '\x5', '$', '\x13', '\x2', '\xDC', 
		'\xDD', '\a', '\t', '\x2', '\x2', '\xDD', '\xDF', '\x3', '\x2', '\x2', 
		'\x2', '\xDE', '\xD8', '\x3', '\x2', '\x2', '\x2', '\xDE', '\xD9', '\x3', 
		'\x2', '\x2', '\x2', '\xDE', '\xDA', '\x3', '\x2', '\x2', '\x2', '\xDF', 
		'\x31', '\x3', '\x2', '\x2', '\x2', '\xE0', '\xE1', '\t', '\a', '\x2', 
		'\x2', '\xE1', '\x33', '\x3', '\x2', '\x2', '\x2', '\xE2', '\xE3', '\a', 
		'(', '\x2', '\x2', '\xE3', '\x35', '\x3', '\x2', '\x2', '\x2', '\x13', 
		'\x39', '\x43', 'I', '[', '\x65', 'u', '}', '\x83', '\x91', '\xA3', '\xAC', 
		'\xB4', '\xBC', '\xC4', '\xCC', '\xD6', '\xDE',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
